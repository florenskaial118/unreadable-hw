#Создайте класс Vector с полями x, y, z определите для него конструктор, метод __str__, необходимые арифметические операции. 
#Программа получает на вход число N, далее координаты N точек. Доопределите в классе Vector недостающие операторы, найдите и выведите координаты точки, наиболее удаленной от начала координат.


class Vector():

    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return (str(self.x) + str(self.y) + str(self.z))
    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)
    def __mul__(self, other):
        return Vector(self.y * other.z - self.z * other.y,  self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)
    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)
    def __truediv__(self, a):
        return Vector((self.x * other.x+self.y * other.y)/(self.x**2+ self.y **2)**0.5, (self.x * other.y-self.y * other.x)/(other.x**2+ other.y **2)**0.5)
    
    
#Реализуйте конструктор, который принимает строку в формате "x,y".
def __init__(self,s):
    S = list(map(int,s.split(",")))
    self.x = S[0]
    self.y = S[1]
    
#Программа получает на вход число N, далее координаты N точек. Доопределите в классе Vector недостающие операторы, найдите и выведите координаты точки, наиболее удаленной от начала координат.

L = dict()
class Vector:
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
    def __abs__(self):
        return ((self.x**2+ self.y **2+ self.z **2)**0.5)
    def __matmul__(self, other):
        return Vector(self.y * other.z - self.z * other.y,  self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)
    def __mul__(self, other):
        return (self.x*other.x+ self.y *other.y+ self.z *other.z)
    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)
    
N = int(input())
for i in range(N):
    x,y,z = list(map(int,input().split()))
    A = Vector(x,y,z) 
    L[(x,y,z)] = abs(A)
L = sorted(L.items(), key=lambda item: -item[1])
print(str("Наиболее удаленная точка: "), L[0][0])

#Используя класс Vector выведите координаты центра масс данного множества точек.
sumx = 0
sumy = 0
sumz = 0
for i in range(N):
    sumx+=L[i][0][0]
    sumy+=L[i][0][1]
    sumz+=L[i][0][2]
print(str("координаты центра масс данного множества точек"), sumx/N, sumy/N,sumz/N)


#Даны два вектора. Выведите площадь параллелограмма, построенного на заданных векторах.
A = Vector(1, 2,3)
B = Vector(3, 4,5)

C = A@B
print(str("площадь параллелограмма, построенного на заданных векторах"),abs(C))

#Даны три вектора. Выведите объём параллелепипеда, построенного на заданных векторах.
A = Vector(1, 2,3)
B = Vector(3, 4,5)
C =  Vector(1, 3,4)
D = B@C
print(str("объём параллелепипеда, построенного на заданных векторах"),abs(A*D))

#Среди данных точек найдите три точки, образующие треугольник с наибольшим периметром. Выведите данный периметр.
A = Vector(1, 2,3)
B = Vector(3, 4,5)
C =  Vector(1, 3,4)
D = Vector(1, 5,6)

from itertools import *
P = {}
for i,j,l in combinations([A, B, C,D], 3):
    P[(i,j,l)] = abs(i-j)+abs(j-l)+abs(l-i)

P = sorted(P.items(), key=lambda item: -item[1])
print(str("1 точка:"),[P[0][0][0].x,P[0][0][0].y,P[0][0][0].z], str("2 точка:"),[P[0][0][1].x,P[0][0][1].y,P[0][0][1].z],str("3 точка:"),[P[0][0][2].x,P[0][0][2].y,P[0][0][2].z])
print(str("P ="),P[0][1])

#Среди данных точек найдите три точки, образующие треугольник с наибольшей площадью. Выведите данную площадь.

P = {}
for i,j,l in combinations([A, B, C,D], 3):
    E = j-i
    F = l-i
    P[(i,j,l)] = abs(E@F)/2

P = sorted(P.items(), key=lambda item: -item[1])
print(str("1 точка:"),[P[0][0][0].x,P[0][0][0].y,P[0][0][0].z], str("2 точка:"),[P[0][0][1].x,P[0][0][1].y,P[0][0][1].z],str("3 точка:"),[P[0][0][2].x,P[0][0][2].y,P[0][0][2].z])
print(str("S ="),P[0][1])
